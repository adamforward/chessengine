// struct AppState {
//     counter: Mutex<usize>,
// }

// async fn handle_move(
//     move_data: web::Json<Move>,
//     data: web::Data<Arc<Mutex<AppState>>>,
// ) -> impl Responder {
//     let moves = vec![
//         "e4", "Nf6", "e5", "Nd5", "d4", "d6", "Nf3", "Bg4", "Bc4", "e6", 
//         "O-O", "Nb6", "Be2", "Be7", "h3", "Bh5", "Bf4", "Nc6", "c3", "O-O", 
//         "Nbd2", "d5", "b4", "a5", "a3", "Qd7", "Qc2", "Bg6", "Bd3", "Rfc8", 
//         "Rfb1", "Bf8", "h4", "Ne7", "g3", "Qa4", "Ne1", "Qxc2", "Bxc2", 
//         "Bxc2", "Nxc2", "Na4", "Rb3", "b6", "Kf1", "c5", "bxc5", "bxc5", 
//         "dxc5", "Rxc5", "Nb1", "Rac8", "Be3", "Rc4", "Bd4", "Nc6", "Rb5", 
//         "Nxd4", "Nxd4", "Nxc3", "Nxc3", "Rxd4", "Ne2", "Ra4", "Ke1", "Rxa3", 
//         "Rab1", "Bb4+", "Kf1", "Rd3"
//     ];

//     let state = data.lock().await;

//     let mut counter = state.counter.lock().await;
//     let index = *counter;

//     if index >= moves.len() {
//         return HttpResponse::BadRequest().json("Index out of bounds");
//     }

//     let result_move = moves.get(index).unwrap_or(&"").clone();

//     // Increment the counter for the next request
//     *counter += 2;

//     // Return the move at the current index
//     HttpResponse::Ok().json(result_move)
// }

fn build_chess_cnn_3(vs: &nn::Path) -> nn::Sequential {
    nn::seq()
        .add(nn::conv2d(vs, 6, 32, 4, nn::ConvConfig { padding: 0, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 32, 32, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.avg_pool2d(&[2, 2], &[2, 2], &[0, 0], false, false, None))
        .add(nn::conv2d(vs, 32, 64, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 64, 64, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.max_pool2d(&[2, 2], &[2, 2], &[0, 0], &[1, 1], false))  // dilation: [1, 1], ceil_mode: false
        .add_fn(|xs| xs.view([-1, 64 * 1 * 1]))  // Flatten the tensor
        .add(nn::linear(vs, 64 * 1 * 1, 128, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false))
        .add(nn::linear(vs, 128, 64, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false))
        .add(nn::linear(vs, 64, 1, Default::default()))
        .add_fn(|xs| xs.sigmoid())
}


fn build_chess_cnn_2(vs: &nn::Path) -> nn::Sequential {
    nn::seq()
        .add(nn::conv2d(vs, 6, 32, 4, nn::ConvConfig { padding: 0, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 32, 32, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.avg_pool2d(&[2, 2], &[2, 2], &[0, 0], false, false, None))  // Corresponds to Python's AvgPool2d
        .add(nn::conv2d(vs, 32, 64, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 64, 64, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.max_pool2d(&[2, 2], &[2, 2], &[0, 0], &[1, 1], false)) // Corresponds to Python's MaxPool2d
        .add_fn(|xs| xs.view([-1, 64 * 1 * 1]))  // Flatten the tensor
        .add(nn::linear(vs, 64 * 1 * 1, 128, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false)) // Corresponds to Python's Dropout
        .add(nn::linear(vs, 128, 64, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false)) // Corresponds to Python's Dropout
        .add(nn::linear(vs, 64, 1, Default::default()))
        .add_fn(|xs| xs.sigmoid())  // Corresponds to Python's Sigmoid
}


fn build_chess_cnn_4(vs: &nn::Path) -> nn::Sequential {
    nn::seq()
        .add(nn::conv2d(vs, 6, 32, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 32, 32, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.avg_pool2d(&[2, 2], &[2, 2], &[0, 0], false, false, None)) // Updated avg_pool2d call
        .add(nn::conv2d(vs, 32, 64, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.max_pool2d(&[2, 2], &[2, 2], &[0, 0], &[1, 1], false)) // Updated max_pool2d call
        .add_fn(|xs| xs.view([-1, 64 * 2 * 2])) // Flatten the tensor
        .add(nn::linear(vs, 64 * 2 * 2, 128, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false)) // Updated dropout call
        .add(nn::linear(vs, 128, 64, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false)) // Updated dropout call
        .add(nn::linear(vs, 64, 1, Default::default()))
        .add_fn(|xs| xs.sigmoid())
}

fn build_chess_cnn_6(vs: &nn::Path) -> nn::Sequential {
    nn::seq()
        .add(nn::conv2d(vs, 6, 32, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 32, 64, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 64, 128, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.max_pool2d(&[2, 2], &[2, 2], &[0, 0], &[1, 1], false)) // Updated max_pool2d call
        .add(nn::conv2d(vs, 128, 128, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 128, 256, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.max_pool2d(&[2, 2], &[2, 2], &[0, 0], &[1, 1], false)) // Updated max_pool2d call
        .add_fn(|xs| xs.view([-1, 256 * 2 * 2]))  // Flatten the tensor
        .add(nn::linear(vs, 256 * 2 * 2, 128, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false)) // Updated dropout call
        .add(nn::linear(vs, 128, 64, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false)) // Updated dropout call
        .add(nn::linear(vs, 64, 1, Default::default()))
        .add_fn(|xs| xs.sigmoid())
}

fn build_chess_cnn_5(vs: &nn::Path) -> nn::Sequential {
    nn::seq()
        .add(nn::conv2d(vs, 6, 32, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 32, 32, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.avg_pool2d(&[2, 2], &[2, 2], &[0, 0], false, false, None))  // Corresponds to Python's AvgPool2d
        .add(nn::conv2d(vs, 32, 64, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add(nn::conv2d(vs, 64, 64, 3, nn::ConvConfig { padding: 1, ..Default::default() }))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.max_pool2d(&[2, 2], &[2, 2], &[0, 0], &[1, 1], false)) // Corresponds to Python's MaxPool2d
        .add_fn(|xs| xs.view([-1, 64 * 2 * 2]))  // Flatten the tensor
        .add(nn::linear(vs, 64 * 2 * 2, 128, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false)) // Corresponds to Python's Dropout
        .add(nn::linear(vs, 128, 64, Default::default()))
        .add_fn(|xs| xs.relu())
        .add_fn(|xs| xs.dropout(0.5, false)) // Corresponds to Python's Dropout
        .add(nn::linear(vs, 64, 1, Default::default()))
        .add_fn(|xs| xs.sigmoid())  // Corresponds to Python's Sigmoid
}


// fn get_nn_build(model: NeuralNetworkSelector, vs: &mut nn::VarStore) -> nn::Sequential {
//     // Build the model based on the selector
//     let sequential_model = match model {
//         NeuralNetworkSelector::Model2 => build_chess_cnn_2(&vs.root()),
//         NeuralNetworkSelector::Model3 => build_chess_cnn_3(&vs.root()),
//         NeuralNetworkSelector::Model4 => build_chess_cnn_4(&vs.root()),
//         NeuralNetworkSelector::Model5 => build_chess_cnn_5(&vs.root()),
//         NeuralNetworkSelector::Model6 => build_chess_cnn_6(&vs.root()),
//         _ => build_chess_cnn_2(&vs.root()), // Default case
//     };

//     // Load the pre-trained weights from the file path provided by NeuralNetworkSelector
//     let model_file_path = model.to_string();
//     if Path::new(&model_file_path).exists() {
//         match vs.load(&model_file_path) {
//             Ok(_) => println!("Successfully loaded pre-trained model from {}", model_file_path),
//             Err(e) => eprintln!("Failed to load the model: {:?}", e),
//         }
//     } else {
//         eprintln!("Model file does not exist at path: {}", model_file_path);
//     }

//     sequential_model
// }

// #[actix_web::main]
// async fn main() -> std::io::Result<()> {
//     let state = Arc::new(Mutex::new(AppState {
//         counter: Mutex::new(0),
//     }));

//     HttpServer::new(move || {
//         App::new()
//             .app_data(web::Data::new(state.clone()))
//             .route("/handle_move", web::post().to(handle_move))
//     })
//     .bind("127.0.0.1:8080")?
//     .run()
//     .await

// pub enum Sygyzy {
//     Na,
//     KBBBvK,
//     KBBNvK,
//     KBBPvK,
//     KBBvK,
//     KBBvKB,
//     KBBvKN,
//     KBBvKP,
//     KBBvKQ,
//     KBBvKR,
//     KBNNvK,
//     KBNPvK,
//     KBNvK,
//     KBNvKB,
//     KBNvKN,
//     KBNvKP,
//     KBNvKQ,
//     KBNvKR,
//     KBPPvK,
//     KBPvK,
//     KBPvKB,
//     KBPvKN,
//     KBPvKP,
//     KBPvKQ,
//     KBPvKR,
//     KBvK,
//     KBvKB,
//     KBvKN,
//     KBvKP,
//     KNNNvK,
//     KNNPvK,
//     KNNvK,
//     KNNvKB,
//     KNNvKN,
//     KNNvKP,
//     KNNvKQ,
//     KNNvKR,
//     KNPPvK,
//     KNPvK,
//     KNPvKB,
//     KNPvKN,
//     KNPvKP,
//     KNPvKQ,
//     KNPvKR,
//     KNvK,
//     KNvKB,
//     KNvKN,
//     KNvKP,
//     KPvK,
//     KPvKB,
//     KPvKN,
//     KPvKP,
//     KQBBvK,
//     KQBNvK,
//     KQBPvK,
//     KQBvK,
//     KQBvKB,
//     KQBvKN,
//     KQBvKP,
//     KQBvKQ,
//     KQBvKR,
//     KQNNvK,
//     KQNPvK,
//     KQNvK,
//     KQNvKB,
//     KQNvKN,
//     KQNvKP,
//     KQNvKQ,
//     KQNvKR,
//     KQPPvK,
//     KQPvK,
//     KQPvKB,
//     KQPvKN,
//     KQPvKP,
//     KQPvKQ,
//     KQPvKR,
//     KQQvK,
//     KQQvKB,
//     KQQvKN,
//     KQQvKP,
//     KQQvKQ,
//     KQQvKR,
//     KQRBvK,
//     KQRNvK,
//     KQRPvK,
//     KQRvK,
//     KQRvKB,
//     KQRvKN,
//     KQRvKP,
//     KQRvKQ,
//     KQRvKR,
//     KRBBvK,
//     KRBNvK,
//     KRBPvK,
//     KRBvK,
//     KRBvKB,
//     KRBvKN,
//     KRBvKP,
//     KRBvKQ,
//     KRBvKR,
//     KRNNvK,
//     KRNPvK,
//     KRNvK,
//     KRNvKB,
//     KRNvKN,
//     KRNvKP,
//     KRNvKQ,
//     KRNvKR,
//     KRPPvK,
//     KRPvK,
//     KRPvKB,
//     KRPvKN,
//     KRPvKP,
//     KRPvKQ,
//     KRPvKR,
//     KRRRvK,
//     KRRvK,
//     KRRvKB,
//     KRRvKN,
//     KRRvKP,
//     KRRvKQ,
//     KRRvKR,
// }

// impl Syzygy {
//     pub fn to_string(&self) -> &str {
//         match self {
//             Syzygy::Na => "Na",
//             Syzygy::KBBBvK => "KBBBvK",
//             Syzygy::KBBNvK => "KBBNvK",
//             Syzygy::KBBPvK => "KBBPvK",
//             Syzygy::KBBvK => "KBBvK",
//             Syzygy::KBBvKB => "KBBvKB",
//             Syzygy::KBBvKN => "KBBvKN",
//             Syzygy::KBBvKP => "KBBvKP",
//             Syzygy::KBBvKQ => "KBBvKQ",
//             Syzygy::KBBvKR => "KBBvKR",
//             Syzygy::KBNNvK => "KBNNvK",
//             Syzygy::KBNPvK => "KBNPvK",
//             Syzygy::KBNvK => "KBNvK",
//             Syzygy::KBNvKB => "KBNvKB",
//             Syzygy::KBNvKN => "KBNvKN",
//             Syzygy::KBNvKP => "KBNvKP",
//             Syzygy::KBNvKQ => "KBNvKQ",
//             Syzygy::KBNvKR => "KBNvKR",
//             Syzygy::KBPPvK => "KBPPvK",
//             Syzygy::KBPvK => "KBPvK",
//             Syzygy::KBPvKB => "KBPvKB",
//             Syzygy::KBPvKN => "KBPvKN",
//             Syzygy::KBPvKP => "KBPvKP",
//             Syzygy::KBPvKQ => "KBPvKQ",
//             Syzygy::KBPvKR => "KBPvKR",
//             Syzygy::KBvK => "KBvK",
//             Syzygy::KBvKB => "KBvKB",
//             Syzygy::KBvKN => "KBvKN",
//             Syzygy::KBvKP => "KBvKP",
//             Syzygy::KNNNvK => "KNNNvK",
//             Syzygy::KNNPvK => "KNNPvK",
//             Syzygy::KNNvK => "KNNvK",
//             Syzygy::KNNvKB => "KNNvKB",
//             Syzygy::KNNvKN => "KNNvKN",
//             Syzygy::KNNvKP => "KNNvKP",
//             Syzygy::KNNvKQ => "KNNvKQ",
//             Syzygy::KNPPvK => "KNPPvK",
//             Syzygy::KNPvK => "KNPvK",
//             Syzygy::KNPvKB => "KNPvKB",
//             Syzygy::KNPvKN => "KNPvKN",
//             Syzygy::KNPvKP => "KNPvKP",
//             Syzygy::KNPvKQ => "KNPvKQ",
//             Syzygy::KNPvKR => "KNPvKR",
//             Syzygy::KNvK => "KNvK",
//             Syzygy::KNvKB => "KNvKB",
//             Syzygy::KNvKN => "KNvKN",
//             Syzygy::KNvKP => "KNvKP",
//             Syzygy::KPvK => "KPvK",
//             Syzygy::KPvKB => "KPvKB",
//             Syzygy::KPvKN => "KPvKN",
//             Syzygy::KPvKP => "KPvKP",
//             Syzygy::KQBBvK => "KQBBvK",
//             Syzygy::KQBNvK => "KQBNvK",
//             Syzygy::KQBPvK => "KQBPvK",
//             Syzygy::KQBvK => "KQBvK",
//             Syzygy::KQBvKB => "KQBvKB",
//             Syzygy::KQBvKN => "KQBvKN",
//             Syzygy::KQBvKP => "KQBvKP",
//             Syzygy::KQBvKQ => "KQBvKQ",
//             Syzygy::KQBvKR => "KQBvKR",
//             Syzygy::KQNNvK => "KQNNvK",
//             Syzygy::KQNPvK => "KQNPvK",
//             Syzygy::KQNvK => "KQNvK",
//             Syzygy::KQNvKB => "KQNvKB",
//             Syzygy::KQNvKN => "KQNvKN",
//             Syzygy::KQNvKP => "KQNvKP",
//             Syzygy::KQNvKQ => "KQNvKQ",
//             Syzygy::KQNvKR => "KQNvKR",
//             Syzygy::KQPPvK => "KQPPvK",
//             Syzygy::KQPvK => "KQPvK",
//             Syzygy::KQPvKB => "KQPvKB",
//             Syzygy::KQPvKN => "KQPvKN",
//             Syzygy::KQPvKP => "KQPvKP",
//             Syzygy::KQPvKQ => "KQPvKQ",
//             Syzygy::KQPvKR => "KQPvKR",
//             Syzygy::KQQvK => "KQQvK",
//             Syzygy::KQQvKB => "KQQvKB",
//             Syzygy::KQQvKN => "KQQvKN",
//             Syzygy::KQQvKP => "KQQvKP",
//             Syzygy::KQQvKQ => "KQQvKQ",
//             Syzygy::KQQvKR => "KQQvKR",
//             Syzygy::KQRBvK => "KQRBvK",
//             Syzygy::KQRNvK => "KQRNvK",
//             Syzygy::KQRPvK => "KQRPvK",
//             Syzygy::KQRvK => "KQRvK",
//             Syzygy::KQRvKB => "KQRvKB",
//             Syzygy::KQRvKN => "KQRvKN",
//             Syzygy::KQRvKP => "KQRvKP",
//             Syzygy::KQRvKQ => "KQRvKQ",
//             Syzygy::KQRvKR => "KQRvKR",
//             Syzygy::KRBBvK => "KRBBvK",
//             Syzygy::KRBNvK => "KRBNvK",
//             Syzygy::KRBPvK => "KRBPvK",
//             Syzygy::KRBvK => "KRBvK",
//             Syzygy::KRBvKB => "KRBvKB",
//             Syzygy::KRBvKN => "KRBvKN",
//             Syzygy::KRBvKP => "KRBvKP",
//             Syzygy::KRBvKQ => "KRBvKQ",
//             Syzygy::KRBvKR => "KRBvKR",
//             Syzygy::KRNNvK => "KRNNvK",
//             Syzygy::KRNPvK => "KRNPvK",
//             Syzygy::KRNvK => "KRNvK",
//             Syzygy::KRNvKB => "KRNvKB",
//             Syzygy::KRNvKN => "KRNvKN",
//             Syzygy::KRNvKP => "KRNvKP",
//             Syzygy::KRNvKQ => "KRNvKQ",
//             Syzygy::KRNvKR => "KRNvKR",
//             Syzygy::KRPPvK => "KRPPvK",
//             Syzygy::KRPvK => "KRPvK",
//             Syzygy::KRPvKB => "KRPvKB",
//             Syzygy::KRPvKN => "KRPvKN",
//             Syzygy::KRPvKP => "KRPvKP",
//             Syzygy::KRPvKQ => "KRPvKQ",
//             Syzygy::KRPvKR => "KRPvKR",
//             Syzygy::KRRRvK => "KRRRvK",
//             Syzygy::KRRvK => "KRRvK",
//             Syzygy::KRRvKB => "KRRvKB",
//             Syzygy::KRRvKN => "KRRvKN",
//             Syzygy::KRRvKP => "KRRvKP",
//             Syzygy::KRRvKQ => "KRRvKQ",
//             Syzygy::KRRvKR => "KRRvKR",
//         }
//     }
// }


// pub fn get_sygyzy_enum(b:&Board>)->Sygyzy{
//     let sum=b.white_piece_ids.len()+b.black_piece_ids.len();
//     if sum>5{
//         return Sygyzy::Na;
//     }
//     else{
//     let mut white_pawns = 0;
//     let mut black_pawns = 0;
//     let mut white_knights = 0;
//     let mut black_knights = 0;
//     let mut white_rooks = 0;
//     let mut black_rooks = 0;
//     let mut white_bishops = 0;
//     let mut black_bishops = 0;
//     let mut white_queens = 0;
//     let mut black_queens = 0;

//     for i in white_piece_ids.iter() {
//         match map_piece_id_to_kind(*i) {
//             Kind::Pawn => white_pawns += 1,
//             Kind::Rook => white_rooks += 1,
//             Kind::Knight => white_knights += 1,
//             Kind::Bishop => white_bishops += 1,
//             Kind::Queen => white_queens += 1,
//             Kind::King | Kind::Empty => {}, // No need to count kings or empty spaces
//         }
//     }

//     for i in black_piece_ids.iter() {
//         match map_piece_id_to_kind(*i) {
//             Kind::Pawn => black_pawns += 1,
//             Kind::Rook => black_rooks += 1,
//             Kind::Knight => black_knights += 1,
//             Kind::Bishop => black_bishops += 1,
//             Kind::Queen => black_queens += 1,
//             Kind::King | Kind::Empty => {}, // No need to count kings or empty spaces
//         }
//     }
//     match (
//             white_pawns, black_pawns,
//             white_knights, black_knights,
//             white_rooks, black_rooks,
//             white_bishops, black_bishops,
//             white_queens, black_queens,
//         ) {
//             (0, 0, 1, 0, 0, 0, 3, 0, 0, 0) => Syzygy::KBBBvK,
//             (0, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KBBNvK,
//             (1, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KBBPvK,
//             (0, 0, 0, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KBBvK,
//             (0, 0, 0, 0, 0, 0, 2, 1, 0, 0) => Syzygy::KBBvKB,
//             (0, 0, 0, 1, 0, 0, 2, 0, 0, 0) => Syzygy::KBBvKN,
//             (0, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KBBvKP,
//             (0, 0, 0, 0, 0, 1, 2, 0, 0, 0) => Syzygy::KBBvKQ,
//             (0, 0, 0, 0, 1, 0, 2, 0, 0, 0) => Syzygy::KBBvKR,
//             (0, 0, 2, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBNNvK,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBNPvK,
//             (0, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBNvK,
//             (0, 0, 1, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KBNvKB,
//             (0, 0, 1, 1, 0, 0, 1, 0, 0, 0) => Syzygy::KBNvKN,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBNvKP,
//             (0, 0, 1, 0, 0, 1, 1, 0, 0, 0) => Syzygy::KBNvKQ,
//             (0, 0, 1, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KBNvKR,
//             (2, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBPPvK,
//             (1, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBPvK,
//             (1, 0, 0, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KBPvKB,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBPvKN,
//             (2, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBPvKP,
//             (1, 0, 0, 0, 0, 1, 1, 0, 0, 0) => Syzygy::KBPvKQ,
//             (1, 0, 0, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KBPvKR,
//             (0, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBvK,
//             (0, 0, 0, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KBvKB,
//             (0, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBvKN,
//             (1, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBvKP,
//             (0, 0, 3, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNNNvK,
//             (1, 0, 2, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNNPvK,
//             (0, 0, 2, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNNvK,
//             (0, 0, 2, 0, 0, 0, 0, 1, 0, 0) => Syzygy::KNNvKB,
//             (0, 0, 2, 1, 0, 0, 0, 0, 0, 0) => Syzygy::KNNvKN,
//             (1, 0, 2, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNNvKP,
//             (0, 0, 2, 0, 0, 1, 0, 0, 0, 0) => Syzygy::KNNvKQ,
//             (0, 0, 2, 0, 1, 0, 0, 0, 0, 0) => Syzygy::KNNvKR,
//             (2, 0, 1, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNPPvK,
//             (1, 0, 1, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNPvK,
//             (1, 0, 1, 0, 0, 0, 0, 1, 0, 0) => Syzygy::KNPvKB,
//             (1, 0, 2, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNPvKN,
//             (2, 0, 1, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNPvKP,
//             (1, 0, 1, 0, 0, 1, 0, 0, 0, 0) => Syzygy::KNPvKQ,
//             (1, 0, 1, 0, 1, 0, 0, 0, 0, 0) => Syzygy::KNPvKR,
//             (0, 0, 1, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNvK,
//             (0, 0, 1, 0, 0, 0, 0, 1, 0, 0) => Syzygy::KNvKB,
//             (0, 0, 1, 1, 0, 0, 0, 0, 0, 0) => Syzygy::KNvKN,
//             (1, 0, 1, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KNvKP,
//             (1, 0, 0, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KPvK,
//             (1, 0, 0, 0, 0, 0, 0, 1, 0, 0) => Syzygy::KPvKB,
//             (1, 0, 1, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KPvKN,
//             (2, 0, 0, 0, 0, 0, 0, 0, 0, 0) => Syzygy::KPvKP,
//             (0, 0, 0, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KQBBvK,
//             (0, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KQBNvK,
//             (1, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KQBPvK,
//             (0, 0, 0, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KQBvK,
//             (0, 0, 0, 0, 0, 1, 2, 1, 0, 0) => Syzygy::KQBvKB,
//             (0, 0, 0, 1, 0, 0, 2, 0, 0, 0) => Syzygy::KQBvKN,
//             (0, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KQBvKP,
//             (0, 0, 0, 0, 0, 1, 2, 0, 0, 0) => Syzygy::KQBvKQ,
//             (0, 0, 0, 0, 1, 0, 2, 0, 0, 0) => Syzygy::KQBvKR,
//             (0, 0, 2, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQNNvK,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQNPvK,
//             (0, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQNvK,
//             (0, 0, 1, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KQNvKB,
//             (0, 0, 1, 1, 0, 0, 1, 0, 0, 0) => Syzygy::KQNvKN,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQNvKP,
//             (0, 0, 1, 0, 0, 1, 1, 0, 0, 0) => Syzygy::KQNvKQ,
//             (0, 0, 1, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KQNvKR,
//             (2, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQPPvK,
//             (1, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQPvK,
//             (1, 0, 0, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KQPvKB,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQPvKN,
//             (2, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQPvKP,
//             (1, 0, 0, 0, 0, 1, 1, 0, 0, 0) => Syzygy::KQPvKQ,
//             (1, 0, 0, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KQPvKR,
//             (0, 0, 0, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KQQvK,
//             (0, 0, 0, 0, 0, 1, 2, 1, 0, 0) => Syzygy::KQQvKB,
//             (0, 0, 0, 1, 0, 0, 2, 0, 0, 0) => Syzygy::KQQvKN,
//             (0, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KQQvKP,
//             (0, 0, 0, 0, 0, 1, 2, 0, 0, 0) => Syzygy::KQQvKQ,
//             (0, 0, 0, 0, 1, 0, 2, 0, 0, 0) => Syzygy::KQQvKR,
//             (0, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQRBvK,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQRNvK,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQRPvK,
//             (0, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQRvK,
//             (0, 0, 0, 0, 0, 1, 1, 1, 0, 0) => Syzygy::KQRvKB,
//             (0, 0, 0, 1, 0, 0, 1, 0, 0, 0) => Syzygy::KQRvKN,
//             (0, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KQRvKP,
//             (0, 0, 0, 0, 0, 1, 1, 0, 0, 0) => Syzygy::KQRvKQ,
//             (0, 0, 0, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KQRvKR,
//             (0, 0, 0, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KRBBvK,
//             (0, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KRBNvK,
//             (1, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KRBPvK,
//             (0, 0, 0, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KRBvK,
//             (0, 0, 0, 0, 0, 1, 2, 1, 0, 0) => Syzygy::KRBvKB,
//             (0, 0, 0, 1, 0, 0, 2, 0, 0, 0) => Syzygy::KRBvKN,
//             (0, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KRBvKP,
//             (0, 0, 0, 0, 0, 1, 2, 0, 0, 0) => Syzygy::KRBvKQ,
//             (0, 0, 0, 0, 1, 0, 2, 0, 0, 0) => Syzygy::KRBvKR,
//             (0, 0, 2, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KRNNvK,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KRNPvK,
//             (0, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KRNvK,
//             (0, 0, 1, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KRNvKB,
//             (0, 0, 1, 1, 0, 0, 1, 0, 0, 0) => Syzygy::KRNvKN,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KRNvKP,
//             (0, 0, 1, 0, 0, 1, 1, 0, 0, 0) => Syzygy::KRNvKQ,
//             (0, 0, 1, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KRNvKR,
//             (2, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KRPPvK,
//             (1, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KRPvK,
//             (1, 0, 0, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KRPvKB,
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KRPvKN,
//             (2, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KRPvKP,
//             (1, 0, 0, 0, 0, 1, 1, 0, 0, 0) => Syzygy::KRPvKQ,
//             (1, 0, 0, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KRPvKR,
//             (0, 0, 0, 0, 0, 0, 3, 0, 0, 0) => Syzygy::KRRRvK,
//             (0, 0, 0, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KRRvK,
//             (0, 0, 0, 0, 0, 1, 2, 1, 0, 0) => Syzygy::KRRvKB,
//             (0, 0, 0, 1, 0, 0, 2, 0, 0, 0) => Syzygy::KRRvKN,
//             (0, 0, 1, 0, 0, 0, 2, 0, 0, 0) => Syzygy::KRRvKP,
//             (0, 0, 0, 0, 0, 1, 2, 0, 0, 0) => Syzygy::KRRvKQ,
//             (0, 0, 0, 0, 1, 0, 2, 0, 0, 0) => Syzygy::KRRvKR,
//             (0, 0, 0, 1, 0, 0, 0, 3, 0, 0) => Syzygy::KBBBvK, // Mirror of KBBBvK
//             (0, 0, 0, 1, 0, 0, 0, 2, 0, 0) => Syzygy::KBBNvK, // Mirror of KBBNvK
//             (0, 1, 0, 1, 0, 0, 0, 2, 0, 0) => Syzygy::KBBPvK, // Mirror of KBBPvK
//             (0, 0, 0, 0, 0, 0, 0, 2, 0, 0) => Syzygy::KBBvK, // Mirror of KBBvK
//             (0, 0, 0, 0, 0, 1, 0, 2, 0, 0) => Syzygy::KBBvKB, // Mirror of KBBvKB
//             (0, 0, 1, 0, 0, 0, 0, 2, 0, 0) => Syzygy::KBBvKN, // Mirror of KBBvKN
//             (0, 1, 0, 0, 0, 0, 0, 2, 0, 0) => Syzygy::KBBvKP, // Mirror of KBBvKP
//             (0, 0, 0, 0, 1, 0, 0, 2, 0, 0) => Syzygy::KBBvKQ, // Mirror of KBBvKQ
//             (0, 0, 0, 0, 0, 1, 0, 2, 0, 0) => Syzygy::KBBvKR, // Mirror of KBBvKR
//             (0, 0, 0, 2, 0, 0, 0, 1, 0, 0) => Syzygy::KBNNvK, // Mirror of KBNNvK
//             (0, 1, 0, 1, 0, 0, 0, 1, 0, 0) => Syzygy::KBNPvK, // Mirror of KBNPvK
//             (0, 0, 0, 1, 0, 0, 0, 1, 0, 0) => Syzygy::KBNvK, // Mirror of KBNvK
//             (0, 0, 0, 1, 1, 0, 0, 1, 0, 0) => Syzygy::KBNvKB, // Mirror of KBNvKB
//             (0, 1, 1, 0, 0, 0, 0, 1, 0, 0) => Syzygy::KBNvKN, // Mirror of KBNvKN
//             (0, 1, 0, 1, 0, 0, 0, 1, 0, 0) => Syzygy::KBNvKP, // Mirror of KBNvKP
//             (0, 0, 1, 0, 1, 0, 0, 1, 0, 0) => Syzygy::KBNvKQ, // Mirror of KBNvKQ
//             (0, 0, 1, 0, 0, 1, 0, 1, 0, 0) => Syzygy::KBNvKR, // Mirror of KBNvKR
//             (0, 1, 0, 0, 0, 0, 0, 1, 0, 0) => Syzygy::KBPPvK, // Mirror of KBPPvK
//             (0, 1, 0, 0, 0, 0, 0, 1, 0, 0) => Syzygy::KBPvK, // Mirror of KBPvK
//             (0, 1, 0, 0, 1, 0, 0, 1, 0, 0) => Syzygy::KBPvKB, // Mirror of KBPvKB
//             (1, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBPvKN, // Mirror of KBPvKN
//             (1, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KBPvKP, // Mirror of KBPvKP
//             (0, 1, 0, 0, 1, 0, 0, 1, 0, 0) => Syzygy::KBPvKQ, // Mirror of KBPvKQ
//             (0, 1, 0, 0, 1, 0, 0, 1, 0, 0) => Syzygy::KBPvKR, // Mirror of KBPvKR
//             (0, 0, 0, 0, 1, 0, 0, 1, 0, 0) => Syzygy::KBvK, // Mirror of KBvK
//             (0, 0, 0, 0, 1, 1, 0, 1, 0, 0) => Syzygy::KBvKB, // Mirror of KBvKB
//             (1, 0, 0, 0, 1, 0, 0, 1, 0, 0) => Syzygy::KBvKN, // Mirror of KBvKN
//             (0, 1, 0, 0, 1, 0, 0, 1, 0, 0) => Syzygy::KBvKP, // Mirror of KBvKP
//             (0, 0, 0, 3, 0, 0, 0, 0, 0, 0) => Syzygy::KNNNvK, // Mirror of KNNNvK
//             (0, 1, 0, 2, 0, 0, 0, 0, 0, 0) => Syzygy::KNNPvK, // Mirror of KNNPvK
//             (0, 0, 0, 2, 0, 0, 0, 0, 0, 0) => Syzygy::KNNvK, // Mirror of KNNvK
//             (0, 0, 0, 2, 0, 0, 1, 0, 0, 0) => Syzygy::KNNvKB, // Mirror of KNNvKB
//             (0, 1, 1, 1, 0, 0, 0, 0, 0, 0) => Syzygy::KNNvKN, // Mirror of KNNvKN
//             (0, 1, 0, 2, 0, 0, 0, 0, 0, 0) => Syzygy::KNNvKP, // Mirror of KNNvKP
//             (0, 0, 1, 1, 1, 0, 0, 0, 0, 0) => Syzygy::KNNvKQ, // Mirror of KNNvKQ
//             (0, 0, 1, 1, 0, 1, 0, 0, 0, 0) => Syzygy::KNNvKR, // Mirror of KNNvKR
//             (0, 1, 0, 1, 0, 0, 0, 0, 0, 0) => Syzygy::KNPPvK, // Mirror of KNPPvK
//             (0, 1, 0, 1, 0, 0, 0, 0, 0, 0) => Syzygy::KNPvK, // Mirror of KNPvK
//             (0, 1, 0, 1, 1, 0, 0, 0, 0, 0) => Syzygy::KNPvKB, // Mirror of KNPvKB
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KNPvKN, // Mirror of KNPvKN
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KNPvKP, // Mirror of KNPvKP
//             (0, 1, 0, 1, 1, 0, 0, 0, 0, 0) => Syzygy::KNPvKQ, // Mirror of KNPvKQ
//             (0, 1, 0, 1, 1, 0, 0, 0, 0, 0) => Syzygy::KNPvKR, // Mirror of KNPvKR
//             (0, 0, 0, 1, 0, 0, 0, 0, 0, 0) => Syzygy::KNvK, // Mirror of KNvK
//             (0, 0, 0, 1, 1, 0, 0, 0, 0, 0) => Syzygy::KNvKB, // Mirror of KNvKB
//             (1, 1, 1, 1, 0, 0, 0, 0, 0, 0) => Syzygy::KNvKN, // Mirror of KNvKN
//             (1, 0, 1, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KNvKP, // Mirror of KNvKP
//             (1, 0, 0, 0, 0, 0, 1, 0, 0, 0) => Syzygy::KPvK, // Mirror of KPvK
//             (1, 0, 0, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KPvKB, // Mirror of KPvKB
//             (1, 1, 1, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KPvKN, // Mirror of KPvKN
//             (2, 0, 1, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KPvKP, // Mirror of KPvKP
//             (0, 0, 0, 2, 0, 0, 0, 1, 0, 0) => Syzygy::KQBBvK, // Mirror of KQBBvK
//             (0, 1, 0, 1, 0, 0, 0, 2, 0, 0) => Syzygy::KQBNvK, // Mirror of KQBNvK
//             (1, 0, 0, 1, 1, 0, 1, 2, 0, 0) => Syzygy::KQBPvK, // Mirror of KQBPvK
//             (0, 0, 0, 2, 0, 0, 0, 2, 0, 0) => Syzygy::KQBvK, // Mirror of KQBvK
//             (0, 0, 0, 2, 0, 1, 0, 2, 0, 0) => Syzygy::KQBvKB, // Mirror of KQBvKB
//             (0, 1, 1, 1, 0, 0, 0, 2, 0, 0) => Syzygy::KQBvKN, // Mirror of KQBvKN
//             (0, 1, 0, 1, 1, 0, 0, 2, 0, 0) => Syzygy::KQBvKP, // Mirror of KQBvKP
//             (0, 0, 1, 0, 1, 0, 1, 2, 0, 0) => Syzygy::KQBvKQ, // Mirror of KQBvKQ
//             (0, 0, 1, 0, 0, 1, 1, 2, 0, 0) => Syzygy::KQBvKR, // Mirror of KQBvKR
//             (0, 1, 0, 0, 0, 0, 0, 2, 0, 0) => Syzygy::KQNNvK, // Mirror of KQNNvK
//             (1, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KQNPvK, // Mirror of KQNPvK
//             (0, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KQNvK, // Mirror of KQNvK
//             (0, 0, 1, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KQNvKB, // Mirror of KQNvKB
//             (0, 1, 1, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KQNvKN, // Mirror of KQNvKN
//             (0, 1, 0, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KQNvKP, // Mirror of KQNvKP
//             (0, 0, 1, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KQNvKQ, // Mirror of KQNvKQ
//             (0, 0, 1, 1, 0, 1, 1, 1, 0, 0) => Syzygy::KQNvKR, // Mirror of KQNvKR
//             (0, 1, 0, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KQPPvK, // Mirror of KQPPvK
//             (1, 0, 0, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KQPvK, // Mirror of KQPvK
//             (1, 0, 0, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KQPvKB, // Mirror of KQPvKB
//             (1, 1, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KQPvKN, // Mirror of KQPvKN
//             (2, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KQPvKP, // Mirror of KQPvKP
//             (1, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KQPvKQ, // Mirror of KQPvKQ
//             (1, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KQPvKR, // Mirror of KQPvKR
//             (0, 0, 0, 2, 0, 0, 0, 2, 0, 0) => Syzygy::KQQvK, // Mirror of KQQvK
//             (0, 0, 0, 2, 0, 1, 0, 2, 0, 0) => Syzygy::KQQvKB, // Mirror of KQQvKB
//             (0, 1, 1, 1, 0, 0, 0, 2, 0, 0) => Syzygy::KQQvKN, // Mirror of KQQvKN
//             (0, 1, 0, 1, 1, 0, 0, 2, 0, 0) => Syzygy::KQQvKP, // Mirror of KQQvKP
//             (0, 0, 1, 0, 1, 0, 1, 2, 0, 0) => Syzygy::KQQvKQ, // Mirror of KQQvKQ
//             (0, 0, 1, 0, 0, 1, 1, 2, 0, 0) => Syzygy::KQQvKR, // Mirror of KQQvKR
//             (0, 0, 1, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KQRBvK, // Mirror of KQRBvK
//             (1, 0, 1, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KQRNvK, // Mirror of KQRNvK
//             (1, 0, 1, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KQRPvK, // Mirror of KQRPvK
//             (0, 0, 0, 0, 1, 0, 1, 0, 0, 0) => Syzygy::KQRvK, // Mirror of KQRvK
//             (0, 0, 0, 0, 1, 1, 1, 1, 0, 0) => Syzygy::KQRvKB, // Mirror of KQRvKB
//             (0, 1, 1, 1, 0, 0, 1, 0, 0, 0) => Syzygy::KQRvKN, // Mirror of KQRvKN
//             (0, 1, 0, 1, 1, 0, 1, 0, 0, 0) => Syzygy::KQRvKP, // Mirror of KQRvKP
//             (0, 0, 1, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KQRvKQ, // Mirror of KQRvKQ
//             (0, 0, 1, 1, 0, 1, 1, 1, 0, 0) => Syzygy::KQRvKR, // Mirror of KQRvKR
//             (0, 0, 0, 2, 0, 0, 0, 2, 0, 0) => Syzygy::KRBBvK, // Mirror of KRBBvK
//             (0, 1, 0, 1, 0, 0, 0, 2, 0, 0) => Syzygy::KRBNvK, // Mirror of KRBNvK
//             (1, 0, 1, 0, 1, 0, 1, 2, 0, 0) => Syzygy::KRBPvK, // Mirror of KRBPvK
//             (0, 0, 0, 2, 0, 0, 0, 2, 0, 0) => Syzygy::KRBvK, // Mirror of KRBvK
//             (0, 0, 0, 2, 0, 1, 0, 2, 0, 0) => Syzygy::KRBvKB, // Mirror of KRBvKB
//             (0, 1, 1, 1, 0, 0, 0, 2, 0, 0) => Syzygy::KRBvKN, // Mirror of KRBvKN
//             (0, 1, 0, 1, 1, 0, 0, 2, 0, 0) => Syzygy::KRBvKP, // Mirror of KRBvKP
//             (0, 0, 1, 0, 1, 0, 1, 2, 0, 0) => Syzygy::KRBvKQ, // Mirror of KRBvKQ
//             (0, 0, 1, 0, 0, 1, 1, 2, 0, 0) => Syzygy::KRBvKR, // Mirror of KRBvKR
//             (0, 1, 0, 0, 0, 0, 0, 2, 0, 0) => Syzygy::KRNNvK, // Mirror of KRNNvK
//             (1, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KRNPvK, // Mirror of KRNPvK
//             (0, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KRNvK, // Mirror of KRNvK
//             (0, 0, 1, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KRNvKB, // Mirror of KRNvKB
//             (0, 1, 1, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KRNvKN, // Mirror of KRNvKN
//             (0, 1, 0, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KRNvKP, // Mirror of KRNvKP
//             (0, 0, 1, 1, 1, 0, 1, 1, 0, 0) => Syzygy::KRNvKQ, // Mirror of KRNvKQ
//             (0, 0, 1, 1, 0, 1, 1, 1, 0, 0) => Syzygy::KRNvKR, // Mirror of KRNvKR
//             (0, 1, 0, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KRPPvK, // Mirror of KRPPvK
//             (1, 0, 0, 0, 0, 0, 1, 1, 0, 0) => Syzygy::KRPvK, // Mirror of KRPvK
//             (1, 0, 0, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KRPvKB, // Mirror of KRPvKB
//             (1, 1, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KRPvKN, // Mirror of KRPvKN
//             (2, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KRPvKP, // Mirror of KRPvKP
//             (1, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KRPvKQ, // Mirror of KRPvKQ
//             (1, 0, 1, 0, 1, 0, 1, 1, 0, 0) => Syzygy::KRPvKR, // Mirror of KRPvKR
//             (0, 0, 0, 3, 0, 0, 0, 0, 0, 0) => Syzygy::KRRRvK, // Mirror of KRRRvK
//             (0, 0, 0, 2, 0, 0, 0, 0, 0, 0) => Syzygy::KRRvK, // Mirror of KRRvK
//             (0, 0, 0, 2, 0, 1, 0, 2, 0, 0) => Syzygy::KRRvKB, // Mirror of KRRvKB
//             (0, 1, 1, 1, 0, 0, 0, 2, 0, 0) => Syzygy::KRRvKN, // Mirror of KRRvKN
//             (0, 1, 0, 1, 1, 0, 0, 2, 0, 0) => Syzygy::KRRvKP, // Mirror of KRRvKP
//             (0, 0, 1, 0, 1, 0, 1, 2, 0, 0) => Syzygy::KRRvKQ, // Mirror of KRRvKQ
//             (0, 0, 1, 0, 0, 1, 1, 2, 0, 0) => Syzygy::KRRvKR, // Mirror of KRRvKR
//             _ => Syzygy::Na,
//         }

//     }
// }
